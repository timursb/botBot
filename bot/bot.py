import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from database import add_photo, get_random_photo_from_album, delete_album

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7801520051:AAHRzF3Zj4U2dH6cxParfjeR0zf46lCfapM"

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üìÇ–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–ª—å–±–æ–º")],
        [KeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")]
    ],
    resize_keyboard=True
)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class PhotoState(StatesGroup):
    waiting_for_album_name = State()
    waiting_for_photos = State()

class AlbumState(StatesGroup):
    waiting_for_album_request = State()
    waiting_for_album_deletion = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, –∏ —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é!", reply_markup=menu_keyboard)

# –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"
@router.message(F.text == "üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
async def ask_for_album_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:")
    await state.set_state(PhotoState.waiting_for_album_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞
@router.message(PhotoState.waiting_for_album_name)
async def receive_album_name(message: Message, state: FSMContext):
    album_name = message.text
    await state.update_data(album_name=album_name)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–ª—å–±–æ–º–∞ {album_name}. –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ!")
    await state.set_state(PhotoState.waiting_for_photos)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ
@router.message(PhotoState.waiting_for_photos, F.photo)
async def save_photos(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    album_name = data.get("album_name")
    for photo in message.photo:
        add_photo(photo.file_id, user_id, album_name)

    await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∞–ª—å–±–æ–º {album_name}! üì∏")
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞"
@router.message(F.text == "üìÇ–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞")
async def ask_for_album_name_for_request(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ:")
    await state.set_state(AlbumState.waiting_for_album_request)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞
@router.message(AlbumState.waiting_for_album_request)
async def send_photo_from_album(message: Message, state: FSMContext):
    album_name = message.text
    user_id = message.from_user.id

    file_id = get_random_photo_from_album(user_id, album_name)

    if file_id:
        await message.answer_photo(file_id, caption=f"–í–æ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ {album_name}! üìÇ")
        await state.update_data(last_album=album_name)
    else:
        await message.answer(f"–í –∞–ª—å–±–æ–º–µ {album_name} –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –∞–ª—å–±–æ–º" (–∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞)
@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–ª—å–±–æ–º")
async def ask_for_album_deletion(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(AlbumState.waiting_for_album_deletion)

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(AlbumState.waiting_for_album_deletion)
async def delete_album_photos(message: Message, state: FSMContext):
    album_name = message.text
    delete_album(album_name)  # –£–¥–∞–ª—è–µ–º –∞–ª—å–±–æ–º
    await message.answer(f"–í—Å–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ {album_name} —É–¥–∞–ª–µ–Ω—ã. üóë")
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"
@router.message(F.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
async def stop_bot(message: Message):
    await message.answer("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys

    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    asyncio.run(main())
